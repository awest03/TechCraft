[
  {
    "Id": "567576",
    "ThreadId": "246400",
    "Html": "\r\n<p>Hi. I hacked into&nbsp;your code, I think it's well written, congratulations ( just downloaded XNA3 &amp; VSE 2008 to make it work ! )&nbsp;&nbsp;</p>\r\n<p>Here is another terrain generation ( smoother valleys landscape) I adapted from the minepackage (unity3d)&nbsp;project &nbsp;<a href=\"http://sourceforge.net/projects/minepackage/\">http://sourceforge.net/projects/minepackage/</a></p>\r\n<p>&nbsp;( BSD license so no problem here) (scroll down for code snippet )</p>\r\n<p>Few remarks :</p>\r\n<p>- I&nbsp;added a check to avoid having underwater trees ;)</p>\r\n<p>- you could use a WorldSettings.SEED to control&nbsp;every pseudo random generator, setting a fixed seed is usefull for testing, and you can link trees placement with terrain generation ( = have reproductibility)</p>\r\n<p>-&nbsp;what s really missing is an infinite world with loading &amp; unloading chunks ( regions in your terms) , I choked on it in my own&nbsp;voxel engine in java and minepackage guys did have difficulties too.</p>\r\n<p>The landscape alternative :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n\r\n<span style=\"color:blue\">namespace</span> TechCraftEngine.WorldEngine.Generators\r\n{\r\n    <span style=\"color:blue\">class</span> DualLayerTerrainWithMediumValleys : LandscapeMapGenerator\r\n    {\r\n        <span style=\"color:blue\">private</span> BlockType[, ,] _map;\r\n\r\n        Random r = <span style=\"color:blue\">new</span> Random();<span style=\"color:green\">// using WorldSettings.SEED would be good</span>\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">new</span> BlockType[, ,] GenerateMap()\r\n        {\r\n            _map = <span style=\"color:blue\">new</span> BlockType[WorldSettings.MAPWIDTH, WorldSettings.MAPHEIGHT, WorldSettings.MAPLENGTH];\r\n            MapTools.Clear(_map, BlockType.None);\r\n\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> x = 0; x &lt; WorldSettings.MAPWIDTH; x&#43;&#43;)\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> z = 0; z &lt; WorldSettings.MAPLENGTH; z&#43;&#43;)\r\n                {\r\n                    generateTerrain(x, z, WorldSettings.MAPHEIGHT);\r\n                }\r\n            }\r\n\r\n            GenerateWaterLayer(WorldSettings.SEALEVEL);\r\n\r\n\r\n            <span style=\"color:blue\">return</span> _map;\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> generateTerrain(<span style=\"color:blue\">int</span> x, <span style=\"color:blue\">int</span> z, <span style=\"color:blue\">int</span> worldDepthInBlocks)\r\n        {\r\n\r\n            <span style=\"color:blue\">int</span> groundHeight = (<span style=\"color:blue\">int</span>)GetBlockNoise(x, z);\r\n            <span style=\"color:blue\">if</span> (groundHeight &lt; 1)\r\n            {\r\n                groundHeight = 1;\r\n            }\r\n            <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (groundHeight &gt; 128)\r\n            {\r\n                groundHeight = 96;\r\n            }\r\n\r\n            <span style=\"color:green\">// Default to sunlit.. for caves</span>\r\n            <span style=\"color:blue\">bool</span> sunlit = <span style=\"color:blue\">true</span>;\r\n            BlockType type = BlockType.None;\r\n            _map[x,groundHeight,z] = BlockType.Grass;\r\n            _map[x,0,z] = BlockType.Dirt;\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> y = worldDepthInBlocks - 1; y &gt; 0; y--)\r\n            {\r\n                <span style=\"color:blue\">if</span> (y &gt; groundHeight)\r\n                {\r\n                    type = BlockType.None;\r\n                }\r\n\r\n                <span style=\"color:green\">// Or we at or below ground height?</span>\r\n                <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (y &lt; groundHeight)\r\n                {\r\n                    <span style=\"color:green\">// Since we are at or below ground height, let's see if we need</span>\r\n                    <span style=\"color:green\">// to make</span>\r\n                    <span style=\"color:green\">// a cave</span>\r\n                    <span style=\"color:blue\">int</span> noiseX = (x &#43; WorldSettings.SEED);\r\n                    <span style=\"color:blue\">float</span> octave1 = PerlinSimplexNoise.noise(noiseX * 0.009f, z * 0.009f, y * 0.009f) * 0.25f;\r\n\r\n                    <span style=\"color:blue\">float</span> initialNoise = octave1 &#43; PerlinSimplexNoise.noise(noiseX * 0.04f, z * 0.04f, y * 0.04f) * 0.15f;\r\n                    initialNoise &#43;= PerlinSimplexNoise.noise(noiseX * 0.08f, z * 0.08f, y * 0.08f) * 0.05f;\r\n\r\n                    <span style=\"color:blue\">if</span> (initialNoise &gt; 0.2f)\r\n                    {\r\n                        type = BlockType.None;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        <span style=\"color:green\">// We've placed a block of dirt instead...nothing below us</span>\r\n                        <span style=\"color:green\">// will be sunlit</span>\r\n                        <span style=\"color:blue\">if</span> (sunlit)\r\n                        {\r\n                            sunlit = <span style=\"color:blue\">false</span>;\r\n                            type = BlockType.Grass;\r\n\r\n                            <span style=\"color:blue\">if</span> (y&gt;WorldSettings.SEALEVEL &amp;&amp; r.Next(250) == 1)\r\n                            {\r\n                                <span style=\"color:green\">//no trees under the see</span>\r\n                               BuildTree(x, y, z);\r\n                            }\r\n\r\n                        }\r\n                        <span style=\"color:blue\">else</span>\r\n                        {\r\n                            type = BlockType.Dirt;\r\n                            <span style=\"color:blue\">if</span> (octave1 &lt; 0.2f)\r\n                            {\r\n                                type = BlockType.Rock;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                _map[x,y,z] = type;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">float</span> GetBlockNoise(<span style=\"color:blue\">int</span> blockX, <span style=\"color:blue\">int</span> blockZ)\r\n        {\r\n            <span style=\"color:blue\">float</span> mediumDetail = PerlinSimplexNoise.noise(blockX / 300.0f, blockZ / 300.0f, 20);\r\n            <span style=\"color:blue\">float</span> fineDetail = PerlinSimplexNoise.noise(blockX / 80.0f, blockZ / 80.0f, 30);\r\n            <span style=\"color:blue\">float</span> bigDetails = PerlinSimplexNoise.noise(blockX / 800.0f, blockZ / 800.0f);\r\n            <span style=\"color:blue\">float</span> noise = bigDetails * 64.0f &#43; mediumDetail * 32.0f &#43; fineDetail * 16.0f; <span style=\"color:green\">// *(bigDetails</span>\r\n            <span style=\"color:green\">// *</span>\r\n            <span style=\"color:green\">// 64.0f);</span>\r\n            <span style=\"color:blue\">return</span> noise &#43; 16;\r\n        }\r\n\r\n        <span style=\"color:blue\">#region</span> copypaste from LandscapeMapGenerator ;)\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> BuildTree(<span style=\"color:blue\">int</span> tx, <span style=\"color:blue\">int</span> ty, <span style=\"color:blue\">int</span> tz)\r\n        {\r\n            <span style=\"color:blue\">int</span> height = 4 &#43; r.Next(3);\r\n\r\n            <span style=\"color:blue\">if</span> ((ty &#43; height) &lt; WorldSettings.MAPHEIGHT)\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> y = ty; y &lt; ty &#43; height; y&#43;&#43;)\r\n                {\r\n                    _map[tx, y, tz] = BlockType.Tree;\r\n                }\r\n            }\r\n\r\n            <span style=\"color:blue\">int</span> radius = 3 &#43; r.Next(2);\r\n            <span style=\"color:blue\">int</span> ny = ty &#43; height;\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; 40 &#43; r.Next(4); i&#43;&#43;)\r\n            {\r\n                <span style=\"color:blue\">int</span> lx = tx &#43; r.Next(radius) - r.Next(radius);\r\n                <span style=\"color:blue\">int</span> ly = ny &#43; r.Next(radius) - r.Next(radius);\r\n                <span style=\"color:blue\">int</span> lz = tz &#43; r.Next(radius) - r.Next(radius);\r\n\r\n                <span style=\"color:blue\">if</span> (MapTools.WithinMapBounds(lx, ly, lz))\r\n                {\r\n                    <span style=\"color:blue\">if</span> (_map[lx, ly, lz] == BlockType.None) _map[lx, ly, lz] = BlockType.Leaves;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> GenerateWaterLayer(<span style=\"color:blue\">int</span> seaLevel)\r\n        {\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> x = 0; x &lt; WorldSettings.MAPWIDTH; x&#43;&#43;)\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> z = 0; z &lt; WorldSettings.MAPLENGTH; z&#43;&#43;)\r\n                {\r\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> y = seaLevel; y &gt; 0; y--)\r\n                    {\r\n                        <span style=\"color:blue\">if</span> (_map[x, y, z] == BlockType.None)\r\n                        {\r\n                            _map[x, y, z] = BlockType.Water;\r\n                        }\r\n                        <span style=\"color:blue\">else</span>\r\n                        {\r\n                            <span style=\"color:blue\">if</span> (_map[x, y, z] == BlockType.Grass)\r\n                            {\r\n                                <span style=\"color:green\">// Grass doesn't grow under water</span>\r\n                                _map[x, y, z] = BlockType.Sand;\r\n                            }\r\n                            <span style=\"color:blue\">break</span>;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>and the perlin/simplex function ripped from minepackage :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n\r\n<span style=\"color:blue\">namespace</span> TechCraftEngine.WorldEngine.Generators\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> PerlinSimplexNoise\r\n    {\r\n        <span style=\"color:blue\">#region</span> Initizalize grad3\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span>[][] grad3 = { \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,-1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,-1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,0,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,0,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,-1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,-1,-1} \r\n                                       };\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Initizalize grad4\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span>[][] grad4 = { \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,-1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,-1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,-1,1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,-1,1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,-1,-1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,-1,-1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,-1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,-1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,0,1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,0,1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,0,-1,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,0,-1,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,1,0,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,1,0,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,-1,0,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,-1,0,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,1,0,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,1,0,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,-1,0,1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,-1,0,-1}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,1,1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,1,-1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,-1,1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,-1,-1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,1,1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,1,-1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,-1,1,0}, \r\n                                           <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{-1,-1,-1,0} \r\n                                       };\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:green\">// A lookup table to traverse the simplex around a given point in 4D. </span>\r\n        <span style=\"color:green\">// Details can be found where this table is used, in the 4D noise method. </span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span>[][] simplex = { \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,2,3},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,1,3,2},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,2,3,1},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,2,3,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,2,1,3},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,3,1,2},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,3,2,1},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,3,2,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,2,0,3},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,3,0,2},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{2,3,0,1},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{2,3,1,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,2,3},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{1,0,3,2},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{2,0,3,1},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{2,1,3,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{2,0,1,3},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{3,0,1,2},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{3,0,2,1},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{3,1,2,0}, \r\n            <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{2,1,0,3},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{3,1,0,2},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{0,0,0,0},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{3,2,0,1},<span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[]{3,2,1,0} \r\n                                         };\r\n\r\n        <span style=\"color:blue\">#region</span> Init p\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span>[] p = {151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23, \r\n190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33, \r\n88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166, \r\n77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244, \r\n102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196, \r\n135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123, \r\n5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42, \r\n223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9, \r\n129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228, \r\n251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107, \r\n49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254, \r\n138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180};\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n\r\n        <span style=\"color:green\">// To remove the need for index wrapping, float the permutation table length </span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span>[] perm = <span style=\"color:blue\">new</span> <span style=\"color:blue\">int</span>[512];\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span><span style=\"color:green\"> </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initializes the &lt;see cref=&quot;PerlinSimplexNoise&quot;/&gt; class. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span><span style=\"color:green\"> </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;author&gt;</span><span style=\"color:green\">Sjef van Leeuwen 3-3-2007 18:27&lt;/author&gt; </span>\r\n        <span style=\"color:blue\">static</span> PerlinSimplexNoise()\r\n        {\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; 512; i&#43;&#43;) perm[i] = p[i &amp; 255];\r\n        }\r\n\r\n        <span style=\"color:green\">// This method is a *lot* faster than using (int)Math.floor(x) </span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span> fastfloor(<span style=\"color:blue\">float</span> x)\r\n        {\r\n            <span style=\"color:blue\">return</span> x &gt; 0 ? (<span style=\"color:blue\">int</span>)x : (<span style=\"color:blue\">int</span>)x - 1;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">float</span> dot(<span style=\"color:blue\">int</span>[] g, <span style=\"color:blue\">float</span> x, <span style=\"color:blue\">float</span> y)\r\n        {\r\n            <span style=\"color:blue\">return</span> g[0] * x &#43; g[1] * y;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">float</span> dot(<span style=\"color:blue\">int</span>[] g, <span style=\"color:blue\">float</span> x, <span style=\"color:blue\">float</span> y, <span style=\"color:blue\">float</span> z)\r\n        {\r\n            <span style=\"color:blue\">return</span> g[0] * x &#43; g[1] * y &#43; g[2] * z;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">float</span> dot(<span style=\"color:blue\">int</span>[] g, <span style=\"color:blue\">float</span> x, <span style=\"color:blue\">float</span> y, <span style=\"color:blue\">float</span> z, <span style=\"color:blue\">float</span> w)\r\n        {\r\n            <span style=\"color:blue\">return</span> g[0] * x &#43; g[1] * y &#43; g[2] * z &#43; g[3] * w;\r\n        }\r\n\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span><span style=\"color:green\"> </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> 3D Simplex noise. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span><span style=\"color:green\"> </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;xin&quot;&gt;</span><span style=\"color:green\">The xin.&lt;/param&gt; </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;yin&quot;&gt;</span><span style=\"color:green\">The yin.&lt;/param&gt; </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;zin&quot;&gt;</span><span style=\"color:green\">The zin.&lt;/param&gt; </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:gray\">&lt;/returns&gt;</span><span style=\"color:green\"> </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;author&gt;</span><span style=\"color:green\">Sjef van Leeuwen 3-3-2007 18:44&lt;/author&gt; </span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">float</span> noise(<span style=\"color:blue\">float</span> xin, <span style=\"color:blue\">float</span> yin, <span style=\"color:blue\">float</span> zin)\r\n        {\r\n            <span style=\"color:blue\">float</span> n0, n1, n2, n3; <span style=\"color:green\">// Noise contributions from the four corners </span>\r\n            <span style=\"color:green\">// Skew the input space to determine which simplex cell we're in </span>\r\n            <span style=\"color:blue\">float</span> F3 = 1.0f / 3.0f;\r\n            <span style=\"color:blue\">float</span> s = (xin &#43; yin &#43; zin) * F3; <span style=\"color:green\">// Very nice and simple skew factor for 3D </span>\r\n            <span style=\"color:blue\">int</span> i = fastfloor(xin &#43; s);\r\n            <span style=\"color:blue\">int</span> j = fastfloor(yin &#43; s);\r\n            <span style=\"color:blue\">int</span> k = fastfloor(zin &#43; s);\r\n            <span style=\"color:blue\">float</span> G3 = 1.0f / 6.0f; <span style=\"color:green\">// Very nice and simple unskew factor, too </span>\r\n            <span style=\"color:blue\">float</span> t = (i &#43; j &#43; k) * G3;\r\n            <span style=\"color:blue\">float</span> X0 = i - t; <span style=\"color:green\">// Unskew the cell origin back to (x,y,z) space </span>\r\n            <span style=\"color:blue\">float</span> Y0 = j - t;\r\n            <span style=\"color:blue\">float</span> Z0 = k - t;\r\n            <span style=\"color:blue\">float</span> x0 = xin - X0; <span style=\"color:green\">// The x,y,z distances from the cell origin </span>\r\n            <span style=\"color:blue\">float</span> y0 = yin - Y0;\r\n            <span style=\"color:blue\">float</span> z0 = zin - Z0;\r\n            <span style=\"color:green\">// For the 3D case, the simplex shape is a slightly irregular tetrahedron. </span>\r\n            <span style=\"color:green\">// Determine which simplex we are in. </span>\r\n            <span style=\"color:blue\">int</span> i1, j1, k1; <span style=\"color:green\">// Offsets for second corner of simplex in (i,j,k) coords </span>\r\n            <span style=\"color:blue\">int</span> i2, j2, k2; <span style=\"color:green\">// Offsets for third corner of simplex in (i,j,k) coords </span>\r\n            <span style=\"color:blue\">if</span> (x0 &gt;= y0)\r\n            {\r\n                <span style=\"color:blue\">if</span> (y0 &gt;= z0)\r\n                {\r\n                    i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n                } <span style=\"color:green\">// X Y Z order </span>\r\n                <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (x0 &gt;= z0)\r\n                {\r\n                    i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\r\n                } <span style=\"color:green\">// X Z Y order </span>\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\r\n                } <span style=\"color:green\">// Z X Y order </span>\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            { <span style=\"color:green\">// x0&lt;y0 </span>\r\n                <span style=\"color:blue\">if</span> (y0 &lt; z0)\r\n                {\r\n                    i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\r\n                } <span style=\"color:green\">// Z Y X order </span>\r\n                <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (x0 &lt; z0)\r\n                {\r\n                    i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\r\n                } <span style=\"color:green\">// Y Z X order </span>\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\r\n                } <span style=\"color:green\">// Y X Z order </span>\r\n            }\r\n            <span style=\"color:green\">// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z), </span>\r\n            <span style=\"color:green\">// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and </span>\r\n            <span style=\"color:green\">// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where </span>\r\n            <span style=\"color:green\">// c = 1/6. </span>\r\n            <span style=\"color:blue\">float</span> x1 = x0 - i1 &#43; G3; <span style=\"color:green\">// Offsets for second corner in (x,y,z) coords </span>\r\n            <span style=\"color:blue\">float</span> y1 = y0 - j1 &#43; G3;\r\n            <span style=\"color:blue\">float</span> z1 = z0 - k1 &#43; G3;\r\n            <span style=\"color:blue\">float</span> x2 = x0 - i2 &#43; 2.0f * G3; <span style=\"color:green\">// Offsets for third corner in (x,y,z) coords </span>\r\n            <span style=\"color:blue\">float</span> y2 = y0 - j2 &#43; 2.0f * G3;\r\n            <span style=\"color:blue\">float</span> z2 = z0 - k2 &#43; 2.0f * G3;\r\n            <span style=\"color:blue\">float</span> x3 = x0 - 1.0f &#43; 3.0f * G3; <span style=\"color:green\">// Offsets for last corner in (x,y,z) coords </span>\r\n            <span style=\"color:blue\">float</span> y3 = y0 - 1.0f &#43; 3.0f * G3;\r\n            <span style=\"color:blue\">float</span> z3 = z0 - 1.0f &#43; 3.0f * G3;\r\n            <span style=\"color:green\">// Work out the hashed gradient indices of the four simplex corners </span>\r\n            <span style=\"color:blue\">int</span> ii = i &amp; 255;\r\n            <span style=\"color:blue\">int</span> jj = j &amp; 255;\r\n            <span style=\"color:blue\">int</span> kk = k &amp; 255;\r\n            <span style=\"color:blue\">int</span> gi0 = perm[ii &#43; perm[jj &#43; perm[kk]]] % 12;\r\n            <span style=\"color:blue\">int</span> gi1 = perm[ii &#43; i1 &#43; perm[jj &#43; j1 &#43; perm[kk &#43; k1]]] % 12;\r\n            <span style=\"color:blue\">int</span> gi2 = perm[ii &#43; i2 &#43; perm[jj &#43; j2 &#43; perm[kk &#43; k2]]] % 12;\r\n            <span style=\"color:blue\">int</span> gi3 = perm[ii &#43; 1 &#43; perm[jj &#43; 1 &#43; perm[kk &#43; 1]]] % 12;\r\n            <span style=\"color:green\">// Calculate the contribution from the four corners </span>\r\n            <span style=\"color:blue\">float</span> t0 = 0.6f - x0 * x0 - y0 * y0 - z0 * z0;\r\n            <span style=\"color:blue\">if</span> (t0 &lt; 0) n0 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t0 *= t0;\r\n                n0 = t0 * t0 * dot(grad3[gi0], x0, y0, z0);\r\n            }\r\n            <span style=\"color:blue\">float</span> t1 = 0.6f - x1 * x1 - y1 * y1 - z1 * z1;\r\n            <span style=\"color:blue\">if</span> (t1 &lt; 0) n1 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t1 *= t1;\r\n                n1 = t1 * t1 * dot(grad3[gi1], x1, y1, z1);\r\n            }\r\n            <span style=\"color:blue\">float</span> t2 = 0.6f - x2 * x2 - y2 * y2 - z2 * z2;\r\n            <span style=\"color:blue\">if</span> (t2 &lt; 0) n2 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t2 *= t2;\r\n                n2 = t2 * t2 * dot(grad3[gi2], x2, y2, z2);\r\n            }\r\n            <span style=\"color:blue\">float</span> t3 = 0.6f - x3 * x3 - y3 * y3 - z3 * z3;\r\n            <span style=\"color:blue\">if</span> (t3 &lt; 0) n3 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t3 *= t3;\r\n                n3 = t3 * t3 * dot(grad3[gi3], x3, y3, z3);\r\n            }\r\n            <span style=\"color:green\">// Add contributions from each corner to get the final noise value. </span>\r\n            <span style=\"color:green\">// The result is scaled to stay just inside [-1,1] </span>\r\n            <span style=\"color:blue\">return</span> 32.0f * (n0 &#43; n1 &#43; n2 &#43; n3);\r\n        }\r\n\r\n        <span style=\"color:green\">// 2D simplex noise </span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">float</span> noise(<span style=\"color:blue\">float</span> xin, <span style=\"color:blue\">float</span> yin)\r\n        {\r\n            <span style=\"color:blue\">float</span> n0, n1, n2; <span style=\"color:green\">// Noise contributions from the three corners </span>\r\n            <span style=\"color:green\">// Skew the input space to determine which simplex cell we're in </span>\r\n            <span style=\"color:blue\">float</span> F2 = (<span style=\"color:blue\">float</span>)(0.5 * (Math.Sqrt(3.0) - 1.0));\r\n            <span style=\"color:blue\">float</span> s = (xin &#43; yin) * F2; <span style=\"color:green\">// Hairy factor for 2D </span>\r\n            <span style=\"color:blue\">int</span> i = fastfloor(xin &#43; s);\r\n            <span style=\"color:blue\">int</span> j = fastfloor(yin &#43; s);\r\n            <span style=\"color:blue\">float</span> g2 = (<span style=\"color:blue\">float</span>)((3.0 - Math.Sqrt(3.0)) / 6.0);\r\n            <span style=\"color:blue\">float</span> t = (i &#43; j) * g2;\r\n            <span style=\"color:blue\">float</span> X0 = i - t; <span style=\"color:green\">// Unskew the cell origin back to (x,y) space </span>\r\n            <span style=\"color:blue\">float</span> Y0 = j - t;\r\n            <span style=\"color:blue\">float</span> x0 = xin - X0; <span style=\"color:green\">// The x,y distances from the cell origin </span>\r\n            <span style=\"color:blue\">float</span> y0 = yin - Y0;\r\n            <span style=\"color:green\">// For the 2D case, the simplex shape is an equilateral triangle. </span>\r\n            <span style=\"color:green\">// Determine which simplex we are in. </span>\r\n            <span style=\"color:blue\">int</span> i1, j1; <span style=\"color:green\">// Offsets for second (middle) corner of simplex in (i,j) coords </span>\r\n            <span style=\"color:blue\">if</span> (x0 &gt; y0)\r\n            {\r\n                i1 = 1; j1 = 0;\r\n            } <span style=\"color:green\">// lower triangle, XY order: (0,0)-&gt;(1,0)-&gt;(1,1) </span>\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                i1 = 0; j1 = 1;\r\n            } <span style=\"color:green\">// upper triangle, YX order: (0,0)-&gt;(0,1)-&gt;(1,1) </span>\r\n            <span style=\"color:green\">// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and </span>\r\n            <span style=\"color:green\">// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where </span>\r\n            <span style=\"color:green\">// c = (3-sqrt(3))/6 </span>\r\n            <span style=\"color:blue\">float</span> x1 = x0 - i1 &#43; g2; <span style=\"color:green\">// Offsets for middle corner in (x,y) unskewed coords </span>\r\n            <span style=\"color:blue\">float</span> y1 = y0 - j1 &#43; g2;\r\n            <span style=\"color:blue\">float</span> x2 = x0 - 1.0f &#43; 2.0f * g2; <span style=\"color:green\">// Offsets for last corner in (x,y) unskewed coords </span>\r\n            <span style=\"color:blue\">float</span> y2 = y0 - 1.0f &#43; 2.0f * g2;\r\n            <span style=\"color:green\">// Work out the hashed gradient indices of the three simplex corners </span>\r\n            <span style=\"color:blue\">int</span> ii = i &amp; 255;\r\n            <span style=\"color:blue\">int</span> jj = j &amp; 255;\r\n            <span style=\"color:blue\">int</span> gi0 = perm[ii &#43; perm[jj]] % 12;\r\n            <span style=\"color:blue\">int</span> gi1 = perm[ii &#43; i1 &#43; perm[jj &#43; j1]] % 12;\r\n            <span style=\"color:blue\">int</span> gi2 = perm[ii &#43; 1 &#43; perm[jj &#43; 1]] % 12;\r\n            <span style=\"color:green\">// Calculate the contribution from the three corners </span>\r\n            <span style=\"color:blue\">float</span> t0 = 0.5f - x0 * x0 - y0 * y0;\r\n            <span style=\"color:blue\">if</span> (t0 &lt; 0)\r\n                n0 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t0 *= t0;\r\n                n0 = t0 * t0 * dot(grad3[gi0], x0, y0); <span style=\"color:green\">// (x,y) of grad3 used for 2D gradient </span>\r\n            }\r\n            <span style=\"color:blue\">float</span> t1 = 0.5f - x1 * x1 - y1 * y1;\r\n            <span style=\"color:blue\">if</span> (t1 &lt; 0)\r\n                n1 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t1 *= t1;\r\n                n1 = t1 * t1 * dot(grad3[gi1], x1, y1);\r\n            }\r\n            <span style=\"color:blue\">float</span> t2 = 0.5f - x2 * x2 - y2 * y2;\r\n            <span style=\"color:blue\">if</span> (t2 &lt; 0)\r\n                n2 = 0.0f;\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                t2 *= t2;\r\n                n2 = t2 * t2 * dot(grad3[gi2], x2, y2);\r\n            }\r\n            <span style=\"color:green\">// Add contributions from each corner to get the final noise value. </span>\r\n            <span style=\"color:green\">// The result is scaled to return values in the interval [-1,1]. </span>\r\n            <span style=\"color:blue\">float</span> returnNoise = 70.0f * (n0 &#43; n1 &#43; n2);\r\n            <span style=\"color:green\">// make it range from 0 to 1;</span>\r\n            <span style=\"color:blue\">return</span> (returnNoise &#43; 1.0f) * 0.5f;\r\n        }\r\n    } \r\n\r\n}\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2011-02-16T19:34:34.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567578",
    "ThreadId": "246400",
    "Html": "<p>And a screenshot</p>\r\n<p><a href=\"http://tinypic.com?ref=35laxpu\" target=\"_blank\"><img src=\"http://i51.tinypic.com/35laxpu.jpg\" border=\"0\" alt=\"Image and video hosting by TinyPic\" /></a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-02-16T19:39:57.017-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "570606",
    "ThreadId": "246400",
    "Html": "<p>pretty sweet</p>",
    "PostedDate": "2011-02-22T23:15:29.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]