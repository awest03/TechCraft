[
  {
    "Id": "572934",
    "ThreadId": "247791",
    "Html": "<p>The developer of another block engine&nbsp;<a href=\"http://www.youtube.com/user/Slaihne12\">http://www.youtube.com/user/Slaihne12</a>&nbsp;suggested some possible improvements to me when i was actively working on this engine, which could possibly improve the time it  takes to rebuild a dirty region.</p>\n<p>Basically if you use multidimensional arrays in .net then behind the scenes it does all sorts of bounds checking. Apparently for an multidimensional array [x,y,z] you should instead store it as a 1 dimensional array [x*y*z] when accessing the array  you calculate the correct index into the 1 dimensional array.</p>\n<p>Given how cool his engine is it's probably worth implementing this change into TechCraft.</p>",
    "PostedDate": "2011-02-27T15:27:06.58-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572951",
    "ThreadId": "247791",
    "Html": "<p>I was surprised to see this so I created a project with the following code and I came to the result that&nbsp;multidimensional&nbsp;arrays were 100%~ faster. &nbsp;Is this true on your machine? &nbsp;Was this what he ment?</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre> <span style=\"color: blue;\">class</span> Program\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: blue;\">int</span>[, ,] arrayone = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256, 256, 256];\r\n            <span style=\"color: blue;\">int</span>[] arraytwo = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256 * 256 * 256];\r\n            Random rand = <span style=\"color: blue;\">new</span> Random();\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\r\n            {\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y&lt; 256; y++)\r\n                {\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\r\n                    {\r\n                        <span style=\"color: blue;\">int</span> item = rand.Next();\r\n                        arrayone[x, y, z] = item;\r\n                        arraytwo[x * y * z] = item;\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color: blue;\">while</span> (<span style=\"color: blue;\">true</span>)\r\n            {\r\n                <span style=\"color: blue;\">int</span> i = 0;\r\n                Stopwatch sw = <span style=\"color: blue;\">new</span> Stopwatch();\r\n                sw.Start();\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\r\n                {\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\r\n                    {\r\n                        <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\r\n                        {\r\n\r\n                            i = arrayone[x, y, z];\r\n                        }\r\n                    }\r\n                }\r\n                sw.Stop();\r\n                Console.WriteLine(sw.ElapsedMilliseconds);\r\n                sw = <span style=\"color: blue;\">new</span> Stopwatch();\r\n                sw.Start();\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\r\n                {\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\r\n                    {\r\n                        <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\r\n                        {\r\n\r\n                            i = arraytwo[x * y * z];\r\n                        }\r\n                    }\r\n                }\r\n                sw.Stop();\r\n                Console.WriteLine(sw.ElapsedMilliseconds);\r\n                Console.ReadLine();\r\n            }\r\n\r\n\r\n\r\n        }\r\n    } <span style=\"color: blue;\">class</span> Program\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: blue;\">int</span>[, ,] arrayone = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256, 256, 256];\r\n            <span style=\"color: blue;\">int</span>[] arraytwo = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256 * 256 * 256];\r\n            Random rand = <span style=\"color: blue;\">new</span> Random();\r\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\r\n            {\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y&lt; 256; y++)\r\n                {\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\r\n                    {\r\n                        <span style=\"color: blue;\">int</span> item = rand.Next();\r\n                        arrayone[x, y, z] = item;\r\n                        arraytwo[x * y * z] = item;\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color: blue;\">while</span> (<span style=\"color: blue;\">true</span>)\r\n            {\r\n                <span style=\"color: blue;\">int</span> i = 0;\r\n                Stopwatch sw = <span style=\"color: blue;\">new</span> Stopwatch();\r\n                sw.Start();\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\r\n                {\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\r\n                    {\r\n                        <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\r\n                        {\r\n\r\n                            i = arrayone[x, y, z];\r\n                        }\r\n                    }\r\n                }\r\n                sw.Stop();\r\n                Console.WriteLine(sw.ElapsedMilliseconds);\r\n                sw = <span style=\"color: blue;\">new</span> Stopwatch();\r\n                sw.Start();\r\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\r\n                {\r\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\r\n                    {\r\n                        <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\r\n                        {\r\n\r\n                            i = arraytwo[x * y * z];\r\n                        }\r\n                    }\r\n                }\r\n                sw.Stop();\r\n                Console.WriteLine(sw.ElapsedMilliseconds);\r\n                Console.ReadLine();\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }\r\n</pre>\r\n<pre><br /></pre>\r\n<pre><br /></pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-02-27T16:41:04.69-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572986",
    "ThreadId": "247791",
    "Html": "<p>if i run it without checking \"optimize code\" in project&nbsp;properties&nbsp;I get&nbsp;179 -&nbsp;&nbsp; 250</p>\r\n<p>but when i check it, i get&nbsp; 151&nbsp;&nbsp;-&nbsp; 59&nbsp; !!</p>\r\n<p>=&gt; Lets always&nbsp;use a method getblock(x,y,z) and we will have the ability to change&nbsp;the implementation&nbsp;!</p>\r\n<p>Sparse arrays implementations&nbsp;may be&nbsp;interesting too, those are hashmap based arrays that do not use memory for null/ zero&nbsp;values (so no memory allocated for&nbsp;BlockType.none, or maybe even for blocktype.rock under sea level&nbsp; ! )</p>\r\n<p>side note : In java 7 beta they found a way to&nbsp;remove the bound checking internally, using this&nbsp;gave me +10 FPS (70 to 80) in my previous java engine, and maybe +3 fps (10 to 13)&nbsp;in&nbsp; minecraft ( i5 laptop with&nbsp;intel hd graphics ... ) &nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-02-27T18:42:31.063-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572991",
    "ThreadId": "247791",
    "Html": "<p>I forgot : you should read this blog and try the attached xna4 project. This is where I took the FPS counter from and there is a whole draw / update statistics system on screen + infinite terrain with a 2d representation of the chunks unloading. Worth reading, and maybe cannibalizing some things ;)</p>\r\n<p><a href=\"http://blog.eckish.net/2011/01/10/perfecting-a-cube/\">http://blog.eckish.net/2011/01/10/perfecting-a-cube/</a></p>\r\n<p>( this is really a R&amp;D tech demo not basis for a game : works on xbox but very few block types, the terrain is only a&nbsp;heightmap, there is no digging, no mouse controls&nbsp;&nbsp;)</p>",
    "PostedDate": "2011-02-27T18:52:07.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "573011",
    "ThreadId": "247791",
    "Html": "<p>Really great article. &nbsp;Yeah good catch on the optimize code option and it&nbsp;defiantly&nbsp;looks like single&nbsp;dimensional&nbsp;array is much faster.</p>",
    "PostedDate": "2011-02-27T19:44:15.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "573014",
    "ThreadId": "247791",
    "Html": "<p>may be worth a try to remove the 60 fps cap and see if changing&nbsp;to single dimensional&nbsp;has an effect on the fps. I ll try tomorrow.</p>",
    "PostedDate": "2011-02-27T19:53:21.797-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "573193",
    "ThreadId": "247791",
    "Html": "<p>This may be obvious, but i initially got it wrong so just in case the correct calculation for an index into the array is</p>\r\n<p>x + (y * _my) &nbsp;+ (z * _mz)</p>\r\n<p>where&nbsp;</p>\r\n<p>_my = (int) _size.X; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>_mz = (int) (_size.X * _size.Y);</p>\r\n<p>and</p>\r\n<p>_size is the region size.</p>\r\n<p>One other optimisation he suggested is to swap the order so its (x*z*y) - that way as you build regions from the ground up you only need to do the index calculation for the first block, then moving up the stack is simply adding 1.</p>",
    "PostedDate": "2011-02-28T04:35:03.79-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "573545",
    "ThreadId": "247791",
    "Html": "<div style=\"color: black; background-color: white;\">\n<pre>The problem with single dimensional arrays using the staggered index is that non-sequential reads start to take a shit on you.<br />The code below (ignore the mess, half hour of typing while on lunch) gives these results for me very consistently.<br />I started to do some memory testing but ran out of time during my lunch. By the way, thanks for introducing me to the stopwatch. I'd always used ticks before (I'm a c/c++ guy).<br /><br />Multidimensional Incremental: 160<br />Jagged Incremental: 104<br />Single Incremental: 89<br /><br />Multidimensional Jumpy: 169<br />Jagged Jumpy: 147<br />Single Jumpy: 386<br /><span style=\"color: blue;\"><br />using</span> System;\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\n<span style=\"color: blue;\">using</span> System.ComponentModel;\n<span style=\"color: blue;\">using</span> System.Data;\n<span style=\"color: blue;\">using</span> System.Drawing;\n<span style=\"color: blue;\">using</span> System.Text;\n<span style=\"color: blue;\">using</span> System.Windows.Forms;\n\n<span style=\"color: blue;\">namespace</span> ArrayTest\n{\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> Form1 : Form\n    {\n        <span style=\"color: blue;\">public</span> Form1()\n        {\n            InitializeComponent();\n        }\n\n        <span style=\"color: blue;\">int</span>[, ,] multidimensional = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256, 256, 256];\n        <span style=\"color: blue;\">int</span>[][][] jagged = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256][][];\n        <span style=\"color: blue;\">int</span>[] single = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256 * 256 * 256];\n        System.Diagnostics.Stopwatch sw = <span style=\"color: blue;\">new</span> System.Diagnostics.Stopwatch();\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> initJagged()\n        {\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> i = 0; i &lt; 256; i++)\n            {\n                jagged[i] = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256][];\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> j = 0; j &lt; 256; j++)\n                {\n                    jagged[i][j] = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">int</span>[256];\n                }\n            }\n        }\n\n\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Form1_Load(<span style=\"color: blue;\">object</span> sender, EventArgs e)\n        {\n            initJagged();\n            <span style=\"color: blue;\">string</span> sResults = <span style=\"color: #a31515;\">\"\"</span>;\n            <span style=\"color: blue;\">long</span> memory = GC.GetTotalMemory(<span style=\"color: blue;\">true</span>);\n\n            <span style=\"color: blue;\">long</span> multiincremental = SetArrayIncremental(multidimensional);          \n            <span style=\"color: blue;\">long</span> jaggedincremental = SetArrayIncremental(jagged);\n            <span style=\"color: blue;\">long</span> singleincremental = SetArrayIncremental(single);\n           \n            <span style=\"color: blue;\">long</span> multijumpy = SetArrayJumpy(multidimensional);          \n            <span style=\"color: blue;\">long</span> jaggedjumpy = SetArrayJumpy(jagged);\n            <span style=\"color: blue;\">long</span> singlejumpy = SetArrayJumpy(single);\n\n\n            sResults += <span style=\"color: #a31515;\">\"\\n\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"Multidimensional Incremental: \"</span> + multiincremental + <span style=\"color: #a31515;\">\"\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"Jagged Incremental: \"</span> + jaggedincremental + <span style=\"color: #a31515;\">\"\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"Single Incremental: \"</span> + singleincremental + <span style=\"color: #a31515;\">\"\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"\\n\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"Multidimensional Jumpy: \"</span> + multijumpy + <span style=\"color: #a31515;\">\"\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"Jagged Jumpy: \"</span> + jaggedjumpy + <span style=\"color: #a31515;\">\"\\n\"</span>;\n            sResults += <span style=\"color: #a31515;\">\"Single Jumpy: \"</span> + singlejumpy + <span style=\"color: #a31515;\">\"\\n\"</span>;\n\n            Console.Write(sResults);\n            MessageBox.Show(sResults);\n            Application.ExitThread();\n        }\n\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">long</span> SetArrayIncremental(<span style=\"color: blue;\">int</span>[, ,] array)\n        {\n            <span style=\"color: blue;\">int</span> counter = 0;\n            sw.Reset();sw.Start();\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\n            {\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\n                {\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\n                    {\n                        array[x, y, z] = counter;\n                        counter++;\n                    }\n                }\n            }\n            <span style=\"color: blue;\">return</span> sw.ElapsedMilliseconds;\n        }\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">long</span> SetArrayIncremental(<span style=\"color: blue;\">int</span>[][][] array)\n        {\n            <span style=\"color: blue;\">int</span> counter = 0;\n            sw.Reset();sw.Start();\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\n            {\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\n                {\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\n                    {\n                        array[x][y][z] = counter;\n                        counter++;\n                    }\n                }\n            }\n            <span style=\"color: blue;\">return</span> sw.ElapsedMilliseconds;\n        }\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">long</span> SetArrayIncremental(<span style=\"color: blue;\">int</span>[] array)\n        {\n            <span style=\"color: blue;\">int</span> counter = 0;\n            sw.Reset();sw.Start();\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\n            {\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\n                {\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\n                    {\n                        array[x * y * x] = counter;\n                        counter++;\n                    }\n                }\n            }\n            <span style=\"color: blue;\">return</span> sw.ElapsedMilliseconds;\n        }\n\n\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">long</span> SetArrayJumpy(<span style=\"color: blue;\">int</span>[, ,] array)\n        {\n            <span style=\"color: blue;\">int</span> counter = 0;\n            <span style=\"color: blue;\">bool</span> bSwitch = <span style=\"color: blue;\">false</span>;\n            sw.Reset();sw.Start();\n            <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int</span>  x = 0; x &lt; 256; x++)\n            {\n                <span style=\"color: blue;\">for</span>(<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\n                {\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\n                    {\n                        <span style=\"color: blue;\">if</span> (bSwitch)\n                        {\n                            array[x, y, z] = counter;\n                        }\n                        <span style=\"color: blue;\">else</span>\n                        {\n                            array[255 - x, 255 - y, 255 - z] = counter;\n                        }\n                        counter++;\n                        bSwitch = !bSwitch;\n                    }\n                }\n            }\n            <span style=\"color: blue;\">return</span> sw.ElapsedMilliseconds;\n        }\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">long</span> SetArrayJumpy(<span style=\"color: blue;\">int</span>[][][] array)\n        {\n            <span style=\"color: blue;\">int</span> counter = 0;\n            <span style=\"color: blue;\">bool</span> bSwitch = <span style=\"color: blue;\">false</span>;\n            sw.Reset();sw.Start();\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\n            {\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\n                {\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\n                    {\n                        <span style=\"color: blue;\">if</span> (bSwitch)\n                        {\n                            array[x][y][z] = counter;\n                        }\n                        <span style=\"color: blue;\">else</span>\n                        {\n                            array[255 - x][255 - y][255 - z] = counter;\n                        }\n                        counter++;\n                        bSwitch = !bSwitch;\n                    }\n                }\n            }\n            <span style=\"color: blue;\">return</span> sw.ElapsedMilliseconds;\n        }\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">long</span> SetArrayJumpy(<span style=\"color: blue;\">int</span>[] array)\n        {\n            <span style=\"color: blue;\">int</span> counter = 0;\n            <span style=\"color: blue;\">bool</span> bSwitch = <span style=\"color: blue;\">false</span>;\n            sw.Reset();sw.Start();\n            <span style=\"color: blue;\">long</span> start = DateTime.Now.Ticks;\n            <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> x = 0; x &lt; 256; x++)\n            {\n                <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> y = 0; y &lt; 256; y++)\n                {\n                    <span style=\"color: blue;\">for</span> (<span style=\"color: blue;\">int</span> z = 0; z &lt; 256; z++)\n                    {\n                        <span style=\"color: blue;\">if</span> (bSwitch)\n                        {\n                            array[x*y*z] = counter;\n                        }\n                        <span style=\"color: blue;\">else</span>\n                        {\n                            array[(255 - x)*(255 - y)*(255 - z)] = counter;\n                        }\n                        counter++;\n                        bSwitch = !bSwitch;\n                    }\n                }\n            }\n            <span style=\"color: blue;\">return</span> sw.ElapsedMilliseconds;\n        }\n\n\n\n\n\n    }\n}\n</pre>\n</div>",
    "PostedDate": "2011-02-28T15:04:22.107-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "573611",
    "ThreadId": "247791",
    "Html": "<p>as always,&nbsp;\"premature optimization is the root of all evil\"</p>\r\n<p>Lets implement the regions/chunks properly, clean up the code&nbsp;/ keep it simple and take real use mesurements (with optimized release code, not in debug ! )</p>\r\n<p>I ll now&nbsp;try to integrate the profiling from here <a href=\"http://blog.eckish.net/2011/01/10/perfecting-a-cube/\">http://blog.eckish.net/2011/01/10/perfecting-a-cube/</a>&nbsp;</p>",
    "PostedDate": "2011-02-28T17:36:26.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "573643",
    "ThreadId": "247791",
    "Html": "<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">﻿</div>\n<p>100 FPS when looking at 13*13 regions without fog, 92 FPS when trying to spam the region rebuilding with the bazooka :)&nbsp;On an intel i5 laptop with integrated gpu !</p>\n<p>( Press F3 to enter statistics mode without <span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">SynchronizeWithVerticalRetrace &amp; fixedTimeStep) </span></span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">&nbsp;</span></span></p>\n<p><img src=\"http://i52.tinypic.com/mv55js.png\" border=\"0\" alt=\"Image and video hosting by TinyPic\" /></p>\n<p>&nbsp;The source is up to date, profiler is very easy to use just put <span style=\"font-family: Consolas; font-size: x-small;\">&nbsp;</span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\">\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">\n<p>&nbsp;&nbsp;<span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\">Profiler</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">.profiler.Start(</span></span><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\"><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\"><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\">\"Something\"</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">);</span></span></p>\n</span></span></p>\n</span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"></span><span style=\"color: #000000;\">---</span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\">SomeMethodToProfile();&nbsp;&nbsp;</span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">&nbsp;</span></span></span><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\">Profiler</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">.profiler.Stop(</span></span><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\"><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\"><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\">\"Something\"</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">);</span></span></span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"></span></span></p>\n<p><span style=\"color: #000000;\">I commited this&nbsp;WorldSettings too :</span></p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> MAPWIDTH = 16*13;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> MAPHEIGHT = 128;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> MAPLENGTH = 16*13;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> FOGNEAR = 90 * 4;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> FOGFAR = 140 * 4;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> FARPLANE = 140 * 4;\r\n\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> REGIONWIDTH = 16;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> REGIONHEIGHT = 128;\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">const</span> <span style=\"color: blue;\">int</span> REGIONLENGTH = 16;\r\n</pre>\n</div>",
    "PostedDate": "2011-02-28T19:50:07.003-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "574810",
    "ThreadId": "247791",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>bamyazi wrote:</strong><br />\n<p>This may be obvious, but i initially got it wrong so just in case the correct calculation for an index into the array is</p>\n<p>x + (y * _my) &nbsp;+ (z * _mz)</p>\n<p>where&nbsp;</p>\n<p>_my = (int) _size.X; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\n<p>_mz = (int) (_size.X * _size.Y);</p>\n<p>and</p>\n<p>_size is the region size.</p>\n<p>One other optimisation he suggested is to swap the order so its (x*z*y) - that way as you build regions from the ground up you only need to do the index calculation for the first block, then moving up the stack is simply adding 1.</p>\n</blockquote>\n<p><br />I've seen this swap order in other engines. It is an improvement worth making. Although, treat it as a multidimensional array (x,z,y) and not&nbsp;a single dimensional array (x*z*y) as ycatsce mentions.</p>",
    "PostedDate": "2011-03-02T23:09:43.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "578104",
    "ThreadId": "247791",
    "Html": "<p>Hi there,</p>\r\n<p>I found this thread after Bamyazi pointed me at this project.</p>\r\n<p>I had a quick read through Ycatsce&rsquo;s benchmark program and noticed a couple of things&hellip;</p>\r\n<p>The line</p>\r\n<pre>array[x * y * x] = counter;</pre>\r\n<p>in SetArrayIncremental for the 1d array has X in twice, but it really should read</p>\r\n<pre>array[x * 65536 + y * 256 + z] = counter;</pre>\r\n<p>or else it won&rsquo;t be a sequential access with the way the loop is organised; Z is the internal loop, so when it increments then the overall reference needs to increment too.</p>\r\n<p>&nbsp;</p>\r\n<p>Also</p>\r\n<p>The lines in SetArrayJumpy (again for the 1d array) also lead to completely non-sequential access&hellip;</p>\r\n<p>They should both be, in order&hellip;</p>\r\n<pre>array[x * 65536 + y * 256 + z] = counter;\r\n\r\narray[(255 - x) * 65536 + (255 - y) * 256 + (255 - z)] = counter;\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 9.5pt;\">This leads to the same type of access as the 3d and jagged array tests.</span></p>\r\n<p><span style=\"font-size: 9.5pt;\"><br /></span></p>\r\n<p><span style=\"font-size: 9.5pt;\">In the benchmark you have actually implemented a single sequential access pattern working upwards through the array, at least for the 3d and jagged versions. The 1d array version was a completely random access pattern.</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">The &lsquo;jumpy&rsquo; section is simply two sequential access patterns interleaved, one working from the bottom of the array and the other from the top, again only for the 3d and jagged array. Again, the 1d array test was a completely random access pattern.</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">The results you were getting were purely because of cache misses on the 1d array since both benchmarks for this were actually random whereas the others were sequential.</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">When compiled and run on my machine looped multiple times I get figures of 718, 682, 279 milliseconds for the sequential accesses for 3d, jagged, and 1d respectively.</span></p>\r\n<p><span style=\"font-size: 9.5pt;\">For the &lsquo;jumpy&rsquo; benchmark I get 766, 600, 450 milliseconds, again for 3d, jagged, and 1d respectively.</span></p>\r\n<p>As you can see, the 1d array benchmarks have a couple of extra multiplies and additions that the other two don&rsquo;t but still come out faster, more so in the non-jumpy test.</p>\r\n<p>&nbsp;</p>\r\n<p>In my engine I actually never use an access pattern that is similar to the benchmark. I tend to calculate the &lsquo;pointer&rsquo; outside of the loop and then just add (or subtract) to it.</p>\r\n<p>The following is a simple lighting clear I use&hellip;</p>\r\n<pre>Public Shared Sub ClearLightChunk(ByVal WorldX As Int32, ByVal Worldz As Int32)\r\n\r\n    Dim x, y, z As Integer\r\n    Dim lp As Integer\r\n    Dim ZL As StructLightBlock\r\n\r\n    ZL.Sun = 0\r\n    ZL.R = 0\r\n    ZL.G = 0\r\n    ZL.B = 0\r\n\r\n    WorldX = WorldX Mod BlockBuffSize\r\n    Worldz = Worldz Mod BlockBuffSize\r\n\r\n    For x = WorldX To WorldX + ChunkSize - 1\r\n      For z = Worldz To Worldz + ChunkSize - 1\r\n        lp = x * clsBlocks.BMX + z * clsBlocks.BMZ\r\n        For y = lp To lp + (BlockBuffheight + 2)\r\n          clsBlocks.LIGHTS(y) = ZL\r\n        Next\r\n      Next\r\n    Next\r\n\r\n End Sub\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p>As you can see, the inner loop has the barest minimum inside it. I could probably optimise this even further but it&rsquo;s already fairly limited by cache misses and so wouldn&rsquo;t get much faster.</p>\r\n<p>Oh, I also saw someone mention using a call to retrieve a block. I used this myself initially but found that it really slowed stuff down.</p>\r\n<p>&nbsp;</p>\r\n<p>Keep up the good work.</p>\r\n<p>&nbsp;</p>\r\n<p>rgds</p>\r\n<p>&nbsp;</p>\r\n<p>Slaihne</p>",
    "PostedDate": "2011-03-09T15:14:55.587-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "578483",
    "ThreadId": "247791",
    "Html": "<p>Hey there, thanks for the comments ... short response from me tho'&nbsp;i'm afraid i've been working over in france for the last week just catching up on my digital life since i managed to take the broken laptop with me from work and have had no internet..completely knackered today from driving back - couple of beers and i'm set to crash :)</p>",
    "PostedDate": "2011-03-10T08:16:19.093-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "596404",
    "ThreadId": "247791",
    "Html": "<p>I've improved ycatse's codes output based on slaihne12's fixes and added iteration support;</p>\r\n<p><a href=\"http://techcraft.codeplex.com/SourceControl/network/Forks/raistlinthewiz/voxlrmerge/changeset/changes/4e0aec0d0e51\">http://techcraft.codeplex.com/SourceControl/network/Forks/raistlinthewiz/voxlrmerge/changeset/changes/4e0aec0d0e51</a></p>\r\n<p>A sample output:&nbsp;<a href=\"http://pastebin.com/Hmx1rTjc\">http://pastebin.com/Hmx1rTjc</a></p>\r\n<p>It seems flatten arrays are always faster and it's even 2x faster then multidimensional pars.</p>",
    "PostedDate": "2011-04-13T01:09:34.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]