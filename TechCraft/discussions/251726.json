[
  {
    "Id": "588555",
    "ThreadId": "251726",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I've been following this project for a while and I wanted to say I love the new project direction.&nbsp; I implemented some new features that might interest you:</p>\r\n<p><strong>Infinite world</strong><br>\r\nChunks generate and render based on the players position.</p>\r\n<p><strong>Multi-Threaded<br>\r\n</strong>I had some frame rate hiccups from generating chunks on the fly ( mainly due to building vertices ) so I put vertex building on a separate thread and had it run constantly.&nbsp; I also only load the chunk closest to the player per frame so that the\r\n locks don't hold up the draw calls.&nbsp; I keep 60 fps constantly with this method.</p>\r\n<p><strong>Server Client Model</strong> (Still in progress)<br>\r\nI added a networking engine that I had been working on for a different project.&nbsp; The server or host holds a separate world from the clients and sends them chunks serialized into a binary format (protobuf) based on their position.&nbsp; The server saves\r\n every so often into an xml file which contains data for the loaded chunks and players.</p>\r\n<p><span style=\"text-decoration:underline\">Small Changes</span></p>\r\n<p>- Added a SelectedBlock class which represents which block the player is currently targeting.</p>\r\n<p>- Using the SelectedBlock class, I added a mining mechanism similar to minecraft.&nbsp; It takes X swings to break a block depending on how tough the block is and a crack decal renders over the block as you dig.</p>\r\n<p>- Added a better terrain generator with mountains, trees, caves, water, beaches surrounding the water, and special tile placement such as gold and iron ores - it looks great!</p>\r\n<p>&nbsp;</p>\r\n<p>I'm still working on it so the code is very far from commented.&nbsp; I should have some ready in a couple days if you're interested.</p>\r\n",
    "PostedDate": "2011-03-29T19:32:20.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588559",
    "ThreadId": "251726",
    "Html": "<p>Of course I am&nbsp;extremely interested ! And I m pretty sure all our silent&nbsp;followers&nbsp;are too&nbsp;;)</p>\r\n<p>Did you achieve to render the world around the camera / playerPos instead of &nbsp;world coordinates, to avoid float instability when&nbsp;coordinates get large ?&nbsp;</p>\r\n<p>In fact I ve been working on the code tonight, and i saw the problem first hand by positioning the world origin at 10000*16,0,10000*16 : the camera jitters a lot.</p>\r\n<p>I ve done few refactorings&nbsp;/ clean ups tonight, but now I do not want to commit&nbsp;all these , merging your code is way more a priority ! &nbsp;&nbsp;</p>\r\n<p>Shoot me the code as is in a zip at enomi&nbsp;dot enomi at gmail dot com !&nbsp; I ll read it tomorrow&nbsp;morning :)&nbsp;&nbsp;Or commit on hg, I m making you a commiter now !</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-29T20:06:27.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588563",
    "ThreadId": "251726",
    "Html": "<p>Oh and just few more things :</p>\r\n<p>- Most important :&nbsp;&nbsp;I did not take the time to&nbsp;put back the frustum culling from the old code !&nbsp;</p>\r\n<p>- There is a bug when digging chunk borders, the nearest chunk(s) should be marked dirty to fill the&nbsp;gaps ( or maybe an other trick if rebuilding up to&nbsp;4 chunks at a time when digging a corner impers&nbsp;performance )&nbsp;</p>\r\n<p>- about server side, I would like to have it running on linux too, I hesitate between writing it in Java (&nbsp;leveraging things like&nbsp;apache mina , and 64 bit jvm for having lots of memory ) or maybe in mono.&nbsp; I m open to any thing !&nbsp; Regarding protocol design,&nbsp;&nbsp;I intended to&nbsp;only&nbsp;send modified blocks on the wire and let clients generate terrain blocks, if carefully designed even trees generation and the likes can be deterministic , based on a seed.</p>\r\n<p>Hope you ll send the code soon, I ve got hundreds of gameplay ideas, performance&nbsp;optimizations to try,&nbsp;some&nbsp;sort of unit testing to implement...&nbsp;lots of things to do !</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-29T20:32:32.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589201",
    "ThreadId": "251726",
    "Html": "<p>Hey enomi,</p>\r\n<p>I didn't render the world around the camera yet as I have other priorities but it will be easy, just use a world transformation matrix instead of moving the camera so that the player is always at 0,0.&nbsp; This will require some physics rewriting.</p>\r\n<p>I like your protocol design, that's basically what I've done.&nbsp; There's a random seed generated by the server that everyone gets and the only chunks that are saved and sent are the ones that have been modified by a player.&nbsp; A linux option would be great.&nbsp; The server i have made is for the xbox / windows but multiplatforming would be a sound goal.&nbsp; Xbox does not let you connect to servers outside of xbox live :(</p>\r\n<p>I have already put in code to set chunks dirty around the block that was dug - the only problem is with vertex building on a separate thread it flashes a little because the draw call happens first sometimes :( - ill need to immediately build the vertices from the main thread to keep this from happening but for now, aesthetics are not my concern.</p>\r\n<p>I didn't even realize the frustum culling was missing! doh!&nbsp; I was so happy with my fps that I didn't notice.&nbsp; I'll toss that in if you haven't already.</p>\r\n<p>Sorry it's taking so long for me to upload it, I'll work on uploading it tomorrow - I've been pretty busy today.</p>\r\n<p>&nbsp;</p>\r\n<p>P.S. We should coordinate some goals for each dev so we can merge our code easier and so we all aren't writing the same things.&nbsp; I think I'm going to merge the original water rendering code next if you haven't already.</p>",
    "PostedDate": "2011-03-30T20:12:23.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589219",
    "ThreadId": "251726",
    "Html": "<p>I forgot to say I also added the option for transparency in solid blocks (leaves for instance).&nbsp; Just add this line in the solidblock shader:</p>\r\n<p>float4 PixelShaderFunction(VertexShaderOutput input) : COLOR0<br />{<br />&nbsp;&nbsp;&nbsp; float4 texColor = tex2D(BlockTextureSampler, input.TexCoords);<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;<strong> if(texColor.a == 0)</strong><br /><strong>&nbsp;&nbsp;&nbsp; {</strong><br /><strong>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; clip(-1);</strong><br /><strong>&nbsp;&nbsp;&nbsp; }</strong><br /><br />&nbsp;&nbsp;&nbsp; float4 ambient = AmbientIntensity * AmbientColor;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; float fog = saturate((input.Distance - FogNear) / (FogNear-FogFar));&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; float4 color =&nbsp; texColor * input.Shade * ambient;<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; return lerp(FogColor, color ,fog);<br />}</p>\r\n<p>&nbsp;</p>\r\n<p><strong>Note: </strong>you will need to render the block faces that borderline these transparent blocks</p>",
    "PostedDate": "2011-03-30T21:30:54.13-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589400",
    "ThreadId": "251726",
    "Html": "<p>why are you recreating triangles? why not use instancing or just move old triangles</p>",
    "PostedDate": "2011-03-31T04:50:48.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589459",
    "ThreadId": "251726",
    "Html": "<blockquote style=\"border: 0.1em solid #cccccc; margin: 0.25em 1em 0pt; padding: 0pt 0.25em; font-style: italic;\"><strong>Skurcey wrote:</strong><br />\r\n<p>why are you recreating triangles? why not use instancing or just move old triangles</p>\r\n</blockquote>\r\n<p>because it works ;)&nbsp; the loop checking faces visibility for one chunk runs so fast that messing with independant triangles seems to be a waste of development time.</p>\r\n<p>Working just on the model ( block array) and letting it rerender is way more easy ( = less prone to bugs ! )</p>\r\n<p>There may be room for improvement, but changing this sort of things requires some measurements before !I m not working for 5 hours to gain .0002 second on a loop when ne next loop takes 0.2 s !</p>\r\n<p>about instancing I m not sure I follow you , but you can read this article , http://blog.eckish.net/2011/01/ this guy did test vertexbuffer&nbsp; vs instancing for minecraftish terrain,and vertexbuffer was the clear winner !</p>",
    "PostedDate": "2011-03-31T05:58:39.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589502",
    "ThreadId": "251726",
    "Html": "<p>Great news Durrban.</p>\n<p>I only did some refactoring to isolate different coordinates systems ( world.viewableChunks / chunk.index&nbsp; vs Chunk.postion vs vertice positions ) in preparation for the rendering around camera thing.</p>\n<p>I m not commiting it , it will be more easy to merge or redo this after your own big commit !</p>\n<p>The transparency trick is clever than having a separate vertexarray just for transparent blocks, I hope it performs well and does not make the card switch render states between each transp and solid block (no idea if clip(-1) does this !).</p>\n<p>- Leave the frustum culling for now, it depends on the \"rendering around camera\"</p>\n<p>- For water rendering , have a try but be carefull : the old code made some sort of out of memory when you let the water flow more than 10 blocks ( at least on my laptop).</p>\n<p>I would really like more realistic water flow : the amount of water would be fixed, when it flows water blocks should move not be created out of nowhere. (Source blocks are the exception)</p>\n<p>When this will be done I d like \"pressurized lava\" flowing up =&nbsp; volcanoes = very dangerous to dig too low ! &nbsp;</p>\n<p>Of course all this would be gankers paradise on a public multiplayer server but makes a very interesting single/coop players world&nbsp; .</p>\n<p>&nbsp;</p>\n<p>And I ll enter some work items to coordinate goals. [ DONE - click on advanced view on the issue tab ]</p>",
    "PostedDate": "2011-03-31T07:06:35.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589970",
    "ThreadId": "251726",
    "Html": "<p>Also Great News,</p>\r\n<p>I've successfully rendered the world around the camera.&nbsp; I'm currently sitting at 1.6 Million x 1.6 Million with no camera artifacts whatsoever!&nbsp; I've implemented frustum culling which works as well.&nbsp; There are some minor physics anomalies but it can be fixed easily.&nbsp; Got water working but no flow yet.&nbsp; Made a \"CharacterPhysics\" class that can deal with player and enemy physics.</p>\r\n<p>To speed things up, I had to draw away from your separation method :(&nbsp; I am recoding everything to use parameters and not the TechCraftGame singleton then it will be ready.</p>",
    "PostedDate": "2011-03-31T21:53:44.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "590198",
    "ThreadId": "251726",
    "Html": "<p>Nice !</p>\r\n<p>I Hope to see the code soon to understand your concern about \"separation method\". Send me a zip if you encounter any problem with hg mercurial ( enomi dot enomi at gmail do t com) or even if you do not have the time to finish everything, i can make the commits for you if it can speed up the process.</p>\r\n<p>About our dig at border/corners bug, one solution may be to implement multiple chunks in Y direction, having 16x16x16 chunks instead of 16x128x16. This sort of things requires taking measurements in release optimized mode ( not debug ) . And&nbsp; it may be a good idea to use the /arch:SSE2 compile flag too&nbsp; !</p>",
    "PostedDate": "2011-04-01T06:38:39.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "590471",
    "ThreadId": "251726",
    "Html": "<p>Awesome!</p>",
    "PostedDate": "2011-04-01T14:07:39.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "590564",
    "ThreadId": "251726",
    "Html": "<p>Gooooo Durrban ! Check it in !&nbsp;We want to see all&nbsp;those marvelous things&nbsp;!</p>",
    "PostedDate": "2011-04-01T20:03:09.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "591746",
    "ThreadId": "251726",
    "Html": "<p>So finally I did merge jacoo s fork in the main code.&nbsp; But we still do not have all of your features, so Durrban, if you come back, we are still interested. Maybe you can help us fix the current code&nbsp;! &nbsp;</p>",
    "PostedDate": "2011-04-04T19:18:32.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593204",
    "ThreadId": "251726",
    "Html": "<p>The threading in this version is very broken...you'll probably see my comment on IRC in the morning ... i got the boundary rendering working i think (i'm pretty sure, but can't be certain 'cos of other issues) basically the chunk building and vertex buffer building run on different threads but aren't synchronised properly so sometimes it builds a vertex buffer from a partially built chunk. I'm going to rewrite things using the .net4 task factory threading stuff that raistlin mentioned on Irc the other day. I've been ripping my hair out 'cos i was almost certain that my boundary code was correct but was getting all sorts of messed up rendering.....i hate multithreaded programming &nbsp;- debugging other peoples multithreaded programming is my idea of hell, but the new .net 4 task stuff that raistlin mention looks ideal for what we need - i spent a fair bit of time researching it today after he mentioned it last night. I'm out tomorrow night so it'll be friday before i get it done (unless i can get it working during my lunch hour hehe), but i'm on the case and will get it all working nice by the weekend!</p>\r\n<p>If you want to try what i've done re the boundary issues in an older version replace BuildVertexList in ChunkRenderer and BuildBlockVertices in VertexBlockRender with these versions</p>\r\n<p>http://dl.dropbox.com/u/9584488/BuildVertexList.txt</p>\r\n<p>http://dl.dropbox.com/u/9584488/vertexblockrenderer.txt</p>\r\n<p>I've commented it up so you should be able to see what is going on&nbsp;</p>\r\n<p>S.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-06T17:13:45.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593240",
    "ThreadId": "251726",
    "Html": "<p>I commited Bamyazi's code as a separate chunkrenderer&nbsp;:&nbsp;&nbsp;BoundariesChunkrenderer.&nbsp; Just uncomment a line&nbsp;in worldrenderer init method&nbsp;to use it.</p>\r\n<p>As I m not the best person for helping on XNA multithreading, I added some keyboard functions&nbsp;to help debugging&nbsp;/ profiling&nbsp;:</p>\r\n<p>Escape : clean exit, aborting the threads on exit (works also with&nbsp;escape key, window close, alt f4).</p>\r\n<p>F4 : resizes the window to 160*100 , useful for looking at your profiler window when your screen is small, press f4 again to restore initial resolution.</p>\r\n<p>Space : release the mouse cursor (press again to restore camera movement)</p>\r\n<p>&nbsp;F7 for wireframe is still there too, now in Game1.cs</p>",
    "PostedDate": "2011-04-06T19:49:28.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593241",
    "ThreadId": "251726",
    "Html": "<p>Great.</p>\r\n<p>I knew about the threading issue when added in. It's only partially implemented, yes. The syncing was/is something that I was thinking of adding in once the subterrain vertex lists were resolved. There was also a discussion about chunk pooling. The only immediate purpose of adding in the thread and queue to the chunks (worldrenderer) was to reduce the lag.</p>\r\n<p>I noticed the vertex buffer and partial chunks, as commented in a recent commit.</p>\r\n<p>I can get started on the task factory if you want?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-06T19:53:14.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593251",
    "ThreadId": "251726",
    "Html": "<p>I just re added the FPS counter with F3 to toggle between Vsync﻿F﻿ixedtimestep / noVsyncAndNoFixedTimestep. The App now starts in vsynch mode.</p>\n<p>You can get started on the task factory if you have time, or wait for bamyazi, as you want !</p>\n<p>I wont commit til tomorrow now.</p>\n<p>&nbsp;EDIT : And now I pushed the commits too ;)</p>",
    "PostedDate": "2011-04-06T20:20:26.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593298",
    "ThreadId": "251726",
    "Html": "<p>Hi jacoo2 - sounds great if you know what the issues are and want to go ahead since i can't work on it today - i'll be back on the case tomorrow if there's any problems with the boundary stuff. I check in on Irc when i get home tonight and see how its going.</p>\r\n<p>S.</p>",
    "PostedDate": "2011-04-07T00:04:00.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593445",
    "ThreadId": "251726",
    "Html": "<p>frameratecounter.cs is missing from the source</p>",
    "PostedDate": "2011-04-07T05:09:29.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593514",
    "ThreadId": "251726",
    "Html": "<p>Sorry I cant commit from where I am now, proxy problems ( I tried and failed ! )</p>\r\n<p>Just copy paste framerateCounter.cs from the root of techcraft4.0 (old project) into a new \"profiling\" folder and change the \"using Newtake.debug\" to&nbsp; using \"NewTake.profiling\" in game1.cs.</p>\r\n<p>debug* resources are excluded from hg, so nothing should be named debug even folders.</p>",
    "PostedDate": "2011-04-07T06:50:14.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593902",
    "ThreadId": "251726",
    "Html": "<p>I added a single threaded implementation using \"your boundary stuff\" , and it does 55-60 FPS when generating the world, it can even fly like crazy at 130 FPS when pressing F3 for unlocked timestep and no vsync (and it&nbsp;'s still on my i5 laptop with embedded gpu ).</p>\n<p>The current multithreaded implem is still there, its just one line to comment/uncomment in game1.cs .</p>\n<p>I leave the code alone for now, you can go crazy with the new concurrent model of csharp4 :)</p>",
    "PostedDate": "2011-04-07T20:24:05.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593947",
    "ThreadId": "251726",
    "Html": "<p>Looks like there's still issues with the boundaries stuff too - i'll have time from this evening to spend on it...would be nice to get this out of the way 'cos it's holding up lots of other cool stuff now :)</p>\n<p>edit - I've fixed the chunk renderer - working version is here&nbsp;http://dl.dropbox.com/u/9584488/SolidBoundsChunkRenderer.cs</p>\n<p>i'll do the .net4 multithreading this evening.</p>",
    "PostedDate": "2011-04-07T23:37:30.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594109",
    "ThreadId": "251726",
    "Html": "<p>cool you ve done the</p>\r\n<pre>//TODO always using solidBlock at boundaries is fast ( no world.blockat) but wrong when world.blockat would send something else that blocktype.NONE<br /><br />And in your code there is still no world.blockat, only few sparse matrix access to get neighbouringChunks ,<br />&nbsp;wich we can optimize later if necessary with something like having members Chunk North, South, West, East; in class Chunk.<br />( and Chunk.Norris of course ;) </pre>",
    "PostedDate": "2011-04-08T05:48:23.757-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594487",
    "ThreadId": "251726",
    "Html": "<p>It's 4am and i've got sucked into hacking around with this &amp;$%! engine all night :) I've got multithreaded chunk building pretty much working as best i can - still using DrawUserPrimatives but now with very basic</p>\r\n<p>batching which gave a moderate improvement in performance. The are some rendering issues due to chunks being built on multiple threads but i think i can overcome them with some trickery in the way chunks&nbsp;</p>\r\n<p>are submitted to be built (it's cheating but it'll probably work). The biggest performance hit now is the WorldRenderer.Update method which with a world size of 27x27 chunks which is visually similar to what</p>\r\n<p>i can see in Minecraft it loops through 729 blocks and causes a small but noticable glitch on the main rendering thread. If we can resolve that then on my laptop at least it seems to perform at least as well as&nbsp;</p>\r\n<p>Minecraft itself. I tried briefly moving the update onto a separate thread but it caused too many problems that i couldn't be bothered to fix at this time of night..it would probably cause no end of problems too.</p>\r\n<p>There was some discussion on IRC earlier about how this could be improved as is so i think that may be the best way forward. I'll wrap things up and post the code in the morning....sleep beckons!</p>",
    "PostedDate": "2011-04-08T20:30:08.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594488",
    "ThreadId": "251726",
    "Html": "<p>cool, its 23:35 here and im already tired. ill commit something cool in the singlethread classes in few minutes, good night !</p>",
    "PostedDate": "2011-04-08T20:35:55.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594492",
    "ThreadId": "251726",
    "Html": "<p>So here is the cool thing : one more singlethread&nbsp;optimization,&nbsp;good&nbsp;for multithread of course :</p>\n<p>As we only draw block faces&nbsp;near empty ones ( so we only draw potentially visible&nbsp;blocks ), we&nbsp;can limit the y loop in BuildVertexList&nbsp; to be only between the lowest and highest empty blocks in chunk . &nbsp;&nbsp;&nbsp;</p>\n<p>These bounds are stored in chunk.highestNoneBlock&nbsp; and chunk.lowestNoneBlock during the terrain generation ( and i implemented it in digging too as a last minute feature ;)&nbsp;</p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">&nbsp;</span></span></p>\n<p>BuildVertexList&nbsp;was taking&nbsp;18 ms to run on average</p>\n<p>Now, on the current terrain without caves, it runs at ... 4.6 ms average !&nbsp;;)</p>",
    "PostedDate": "2011-04-08T21:17:10.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594540",
    "ThreadId": "251726",
    "Html": "<p>Current state of multithreaded madness available here&nbsp;﻿﻿http://dl.dropbox.com/u/9584488/TechCraft_Threadtest.rar</p>\n<p>I've tried to stay within the code structure but i did have to do one or two hacks so consider this experimental. Once i've got it the remaining glitches ironed out i'll implement it cleanly (unless anyone wants&nbsp;</p>\n<p>to pull it togeather today - the rendering issues are very minor) - i'm off to the beach since it's a gorgeous day here.</p>\n<p>Sounds like your optimization would fit in easily enomi - nice one - we're getting there. The chunk batching code will apply to single threaded easily too.</p>\n<p>S.</p>\n<p>edit - just tried deploying this implementation to xbox and unfortunately it won't work because the compact framework doesn't support the task.factory stuff. Personally i'm not that bothered at the moment we can do another threading model to support xbox/wp7 at a later date - enomi's code structure mean that it won't be too much of a problem, but i thought i'd post an update to get peoples feedback on things.&nbsp;</p>\n<p>I also just tried FortressCraft on the xbox which has just been officially released on Indie games and while it's visually very cool it is FULL of bugs at the moment still. They do have an awesome effect where chunks rise up into the sky as they load which looks very cool, but the game locks solid for me every 30 seconds or so which kindof spoils all the nice effects which is a shame.</p>",
    "PostedDate": "2011-04-09T02:24:57.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594581",
    "ThreadId": "251726",
    "Html": "<p>I just tried your last code on my desktop athlon 6000+ dual core,&nbsp; GF9800 GT . I see no rendreing issue, but&nbsp; I only get 30 FPS, even with FlatReferenceTerrain !&nbsp;</p>\r\n<p>FPS goes slightly up when pressing F3 to loose the fixedtimestep. Maybe we re doing too much things in draw instead of update.</p>\r\n<p>&nbsp;( add&nbsp; chunk.generated = true; at the end of flatReferenceterrain to make it usable)</p>\r\n<p>BTW I tried fortresscraf too, promising but definitely not a finished product ! Collision detection was disturbing and water kept appearing and disappearing.</p>\r\n<p>but its one of the rare indie games where I&nbsp; hit the 8 minutes demo time limit ;)</p>",
    "PostedDate": "2011-04-09T06:44:39.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594586",
    "ThreadId": "251726",
    "Html": "<p>Yeah - i tried all sorts of things to improve the frameright - If you look in the ChunkBatcher code try swapping the rendering methods - it may be that we can improve things there somehow since it does quite a lot of&nbsp;</p>\r\n<p>array copies, however from my tests DUP still came out top. I'm still playing around so will keep you updated, can you send me your updated chunk rendering optimizations and i'll try with them too. Might be worth&nbsp;</p>\r\n<p>getting someone with a decent profiler to profile it and post the results.</p>",
    "PostedDate": "2011-04-09T06:56:06.303-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594609",
    "ThreadId": "251726",
    "Html": "\r\n<p>Its checked in. NOthing else to send<br>\r\n</p>\r\n<div>On 2011-04-09 9:56 AM, &quot;bamyazi&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n&gt; From: bamyazi<br>\r\n&gt; <br>\r\n&gt; Yeah - i tried all sorts of things to improve the frameright - If you look in the ChunkBatcher code try swapping the rendering methods - it may be that we can improve things there somehow since it does quite a lot of array copies, however from my tests DUP\r\n still came out top. I'm still playing around so will keep you updated, can you send me your updated chunk rendering optimizations and i'll try with them too. Might be worth getting someone with a decent profiler to profile it and post the results.\r\n<br>\r\n&gt; <br>\r\n&gt; <br>\r\n</div>\r\n",
    "PostedDate": "2011-04-09T07:49:17.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594684",
    "ThreadId": "251726",
    "Html": "<p>I'm a bit lost now on the multithreaded stuff to be honest - i'm building a clean implementation of all 3 current versions based on your last checkin..and keeping the code structure which i'd hacked up in my experiments</p>\n<p>A pure single threaded version&nbsp;</p>\n<p>A queued threaded version&nbsp;</p>\n<p>A multithreaded task based version</p>\n<p>so we can compare them properly since you appear to get very different performance than me on your machine. If anyone else can help with the threaded versions please do as i'm really out of my comfort zone on asychronous stuff...Chunk feckin Norris or not  :)</p>",
    "PostedDate": "2011-04-09T12:02:15.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "594710",
    "ThreadId": "251726",
    "Html": "<p>Thats crazy I get 60 fps mostly constant on the i5 laptop !&nbsp;Your code is laptop optimized by accident !</p>\r\n<p>I suspect&nbsp;the mem copies and DUP are very fast&nbsp;on&nbsp;these kind of laptops and on on&nbsp;the xbox !</p>\r\n<p>This is very interesting cause most games suck on these laptops ( minecraft for example)&nbsp;.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-09T13:28:34.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]